// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"code.cloudfoundry.org/bbs/models"
	"code.cloudfoundry.org/route-emitter/tcp/routing_table"
)

type FakeRoutingTableHandler struct {
	HandleEventStub        func(event models.Event)
	handleEventMutex       sync.RWMutex
	handleEventArgsForCall []struct {
		event models.Event
	}
	SyncStub           func()
	syncMutex          sync.RWMutex
	syncArgsForCall    []struct{}
	SyncingStub        func() bool
	syncingMutex       sync.RWMutex
	syncingArgsForCall []struct{}
	syncingReturns     struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRoutingTableHandler) HandleEvent(event models.Event) {
	fake.handleEventMutex.Lock()
	fake.handleEventArgsForCall = append(fake.handleEventArgsForCall, struct {
		event models.Event
	}{event})
	fake.recordInvocation("HandleEvent", []interface{}{event})
	fake.handleEventMutex.Unlock()
	if fake.HandleEventStub != nil {
		fake.HandleEventStub(event)
	}
}

func (fake *FakeRoutingTableHandler) HandleEventCallCount() int {
	fake.handleEventMutex.RLock()
	defer fake.handleEventMutex.RUnlock()
	return len(fake.handleEventArgsForCall)
}

func (fake *FakeRoutingTableHandler) HandleEventArgsForCall(i int) models.Event {
	fake.handleEventMutex.RLock()
	defer fake.handleEventMutex.RUnlock()
	return fake.handleEventArgsForCall[i].event
}

func (fake *FakeRoutingTableHandler) Sync() {
	fake.syncMutex.Lock()
	fake.syncArgsForCall = append(fake.syncArgsForCall, struct{}{})
	fake.recordInvocation("Sync", []interface{}{})
	fake.syncMutex.Unlock()
	if fake.SyncStub != nil {
		fake.SyncStub()
	}
}

func (fake *FakeRoutingTableHandler) SyncCallCount() int {
	fake.syncMutex.RLock()
	defer fake.syncMutex.RUnlock()
	return len(fake.syncArgsForCall)
}

func (fake *FakeRoutingTableHandler) Syncing() bool {
	fake.syncingMutex.Lock()
	fake.syncingArgsForCall = append(fake.syncingArgsForCall, struct{}{})
	fake.recordInvocation("Syncing", []interface{}{})
	fake.syncingMutex.Unlock()
	if fake.SyncingStub != nil {
		return fake.SyncingStub()
	} else {
		return fake.syncingReturns.result1
	}
}

func (fake *FakeRoutingTableHandler) SyncingCallCount() int {
	fake.syncingMutex.RLock()
	defer fake.syncingMutex.RUnlock()
	return len(fake.syncingArgsForCall)
}

func (fake *FakeRoutingTableHandler) SyncingReturns(result1 bool) {
	fake.SyncingStub = nil
	fake.syncingReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeRoutingTableHandler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.handleEventMutex.RLock()
	defer fake.handleEventMutex.RUnlock()
	fake.syncMutex.RLock()
	defer fake.syncMutex.RUnlock()
	fake.syncingMutex.RLock()
	defer fake.syncingMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeRoutingTableHandler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ routing_table.RoutingTableHandler = new(FakeRoutingTableHandler)
