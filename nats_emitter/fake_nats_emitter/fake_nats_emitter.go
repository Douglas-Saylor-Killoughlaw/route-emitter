// This file was generated by counterfeiter
package fake_nats_emitter

import (
	"sync"

	"code.cloudfoundry.org/route-emitter/nats_emitter"
	"code.cloudfoundry.org/route-emitter/routing_table"
)

type FakeNATSEmitter struct {
	EmitStub        func(messagesToEmit routing_table.MessagesToEmit) error
	emitMutex       sync.RWMutex
	emitArgsForCall []struct {
		messagesToEmit routing_table.MessagesToEmit
	}
	emitReturns struct {
		result1 error
	}
	StopHeartBeatStub        func()
	stopHeartBeatMutex       sync.RWMutex
	stopHeartBeatArgsForCall []struct{}
}

func (fake *FakeNATSEmitter) Emit(messagesToEmit routing_table.MessagesToEmit) error {
	fake.emitMutex.Lock()
	fake.emitArgsForCall = append(fake.emitArgsForCall, struct {
		messagesToEmit routing_table.MessagesToEmit
	}{messagesToEmit})
	fake.emitMutex.Unlock()
	if fake.EmitStub != nil {
		return fake.EmitStub(messagesToEmit)
	} else {
		return fake.emitReturns.result1
	}
}

func (fake *FakeNATSEmitter) EmitCallCount() int {
	fake.emitMutex.RLock()
	defer fake.emitMutex.RUnlock()
	return len(fake.emitArgsForCall)
}

func (fake *FakeNATSEmitter) EmitArgsForCall(i int) routing_table.MessagesToEmit {
	fake.emitMutex.RLock()
	defer fake.emitMutex.RUnlock()
	return fake.emitArgsForCall[i].messagesToEmit
}

func (fake *FakeNATSEmitter) EmitReturns(result1 error) {
	fake.EmitStub = nil
	fake.emitReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeNATSEmitter) StopHeartBeat() {
	fake.stopHeartBeatMutex.Lock()
	fake.stopHeartBeatArgsForCall = append(fake.stopHeartBeatArgsForCall, struct{}{})
	fake.stopHeartBeatMutex.Unlock()
	if fake.StopHeartBeatStub != nil {
		fake.StopHeartBeatStub()
	}
}

func (fake *FakeNATSEmitter) StopHeartBeatCallCount() int {
	fake.stopHeartBeatMutex.RLock()
	defer fake.stopHeartBeatMutex.RUnlock()
	return len(fake.stopHeartBeatArgsForCall)
}

var _ nats_emitter.NATSEmitter = new(FakeNATSEmitter)
